{
    "Search rules":[
      {
        "bilibili":"      const mixinKeyEncTab = [\n        46, 47, 18, 2, 53, 8, 23, 32, 15, 50, 10, 31, 58, 3, 45, 35, 27, 43, 5,\n        49, 33, 9, 42, 19, 29, 28, 14, 39, 12, 38, 41, 13, 37, 48, 7, 16, 24,\n        55, 40, 61, 26, 17, 0, 1, 60, 51, 30, 4, 22, 25, 54, 21, 56, 59, 6, 63,\n        57, 62, 11, 36, 20, 34, 44, 52,\n      ];\n\n      // 获取混淆后的 key\n      function getMixinKey(orig) {\n        return mixinKeyEncTab\n          .map((n) => orig[n])\n          .join(\"\")\n          .slice(0, 32);\n      }\n\n      /**\n       * 使用代理服务器的通用请求函数：\n       * - url: 目标请求URL\n       * - method: 请求方法 (默认 GET)\n       * - headers: 请求头对象\n       * - params: URL参数 (如需添加查询字符串)\n       * - body: POST/PUT 请求体\n       * - 返回获取到的 body 内容 (如果是 JSON，已解析为对象)\n       */\n      async function proxyFetch({\n        url,\n        method = \"GET\",\n        headers = {},\n        params = {},\n        body = null,\n      }) {\n        // 将 params 转为查询字符串\n        const queryString = new URLSearchParams(params).toString();\n        const finalUrl = queryString ? `${url}?${queryString}` : url;\n\n        // 使用代理服务器 https://nbgroup.pythonanywhere.com/proxy\n        const response = await fetch(\n          \"https://nbgroup.pythonanywhere.com/proxy\",\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              url: finalUrl,\n              method,\n              headers,\n              body,\n            }),\n          }\n        );\n\n        const proxyResult = await response.json();\n        // proxyResult.body 会包含目标请求的响应\n        return proxyResult.body;\n      }\n\n      // 获取API所需的 buvid3\n      async function getBuvidValues() {\n        try {\n          // 这里通过代理发起 GET 请求\n          const data = await proxyFetch({\n            url: \"https://api.bilibili.com/x/frontend/finger/spi\",\n            headers: {\n              \"User-Agent\":\n                \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \\nAppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\",\n              Referer: \"https://www.bilibili.com/\",\n            },\n          });\n\n          if (data.code === 0) {\n            // 返回 b_3 (buvid3), b_4 (buvid4) 等信息\n            const { b_3 } = data.data;\n            return b_3;\n          } else {\n            console.error(\"Error code returned:\", data.code, data.message);\n          }\n        } catch (error) {\n          console.error(\"API request failed:\", error);\n        }\n      }\n\n      // 对请求参数进行 Wbi 签名\n      function encWbi(params, imgKey, subKey) {\n        const mixinKey = getMixinKey(imgKey + subKey);\n        const currTime = Math.round(Date.now() / 1000);\n        const chrFilter = /[!'()*]/g;\n\n        // 添加 wts 字段\n        params.wts = currTime;\n\n        // 按 key 重排序并生成查询字符串\n        const query = Object.keys(params)\n          .sort()\n          .map((key) => {\n            const value = params[key].toString().replace(chrFilter, \"\");\n            return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n          })\n          .join(\"&\");\n\n        // 计算 w_rid\n        const wbiSign = md5(query + mixinKey);\n        return `${query}&w_rid=${wbiSign}`;\n      }\n\n      /**\n       * 获取最新的 Wbi Keys (img_key 和 sub_key)\n       * - 需要使用代理访问 https://api.bilibili.com/x/web-interface/nav\n       * - 需在 headers 中传入 SESSDATA\n       */\n      async function getWbiKeys(sessdata = \"xxxxxx\") {\n        const json = await proxyFetch({\n          url: \"https://api.bilibili.com/x/web-interface/nav\",\n          method: \"GET\",\n          headers: {\n            Cookie: `SESSDATA=${sessdata}`,\n            \"User-Agent\":\n              \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \\nAppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\",\n            Referer: \"https://www.bilibili.com/\",\n          },\n        });\n\n        const {\n          wbi_img: { img_url, sub_url },\n        } = json.data;\n\n        return {\n          img_key: img_url.slice(\n            img_url.lastIndexOf(\"/\") + 1,\n            img_url.lastIndexOf(\".\")\n          ),\n          sub_key: sub_url.slice(\n            sub_url.lastIndexOf(\"/\") + 1,\n            sub_url.lastIndexOf(\".\")\n          ),\n        };\n      }\n\n      /**\n       * B站视频搜索：\n       * - keyword: 搜索关键词\n       * - search_type: 搜索类型\n       * - page: 页码\n       * - order: 排序方式\n       * - duration: 视频时长筛选\n       * - tids: 视频分区筛选\n       * 通过代理服务器来避免跨域。\n       */\n      async function searchBilibiliVideo(\n        keyword,\n        search_type = \"video\",\n        page = 1,\n        order = \"totalrank\",\n        duration = 0,\n        tids = 0\n      ) {\n        // 获取最新的Wbi Key\n        const { img_key, sub_key } = await getWbiKeys(\"XXXX\");\n        // 基本查询参数\n        const params = {\n          search_type: \"video\",\n          keyword,\n          order,\n          duration,\n          tids,\n          page,\n        };\n        // 生成Wbi加密查询\n        const query = encWbi(params, img_key, sub_key);\n        // 拼接上目标API\n        const finalUrl = `https://api.bilibili.com/x/web-interface/wbi/search/type?${query}`;\n\n        // 通过proxyFetch发起请求\n        const resJson = await proxyFetch({\n          url: finalUrl,\n          method: \"GET\",\n          headers: {\n            Cookie: `buvid3=${await getBuvidValues()};`,\n            Referer: \"https://www.bilibili.com/\",\n            \"User-Agent\":\n              \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \\nAppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\",\n          },\n        });\n        let data = resJson.data.result;\n        let videoList = data.map((item) => {\n          let bvid = item.arcurl;\n          bvid = bvid.slice(bvid.lastIndexOf(\"/\") + 1);\n          // 如果bvid不以av开头，就不加到列表中\n          if (!bvid.startsWith(\"av\")) return null;\n          return bvid;\n        });\n        return videoList;\n      }\n\n      // 测试调用示例\n      async function main() {\n        const result = await searchBilibiliVideo(\"少年\", 1);\n        return result;\n      }"
      }
    ]
  }
